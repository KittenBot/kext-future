{
  libs:{
    wifi: {
      keywords: ['wifi']
    }
  },
  blocks: [
    '## $$futureboard_title_wifi',
    {
      opcode: 'wificonnect',
      blockType: 'command',
      text: '$$futureboard_wifi_connect',
      pycode: "wifi.connect([NAME], [PWD])",
      // isAsync: true,
      // timeout: 10000,
      arguments: {
        NAME: {
          type: 'string',
          defaultValue: 'name',
        },
        PWD: {
          type: 'string',
          defaultValue: 'pwd',
        },
      },
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wifiisconnected',
      blockType: 'Boolean',
      text: '$$futureboard_wifi_isconnected',
      pycode: 'wifi.sta.isconnected()',
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wificonfig',
      blockType: 'reporter',
      text: '$$futureboard_wifi_config',
      disableMonitor: 1,
      pycode: 'wifi.sta.ifconfig()',
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wificonfigwithopt',
      blockType: 'reporter',
      text: '$$futureboard_wifi_config_withopt',
      pycode: 'wifi.sta.ifconfig()[[TYPE]]',
      arguments: {
        TYPE: {
          type: 'string',
          defaultValue: 0,
          menu: 'IFTYPE',
        },
      },
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wifimac',
      blockType: 'reporter',
      text: '$$futureboard_wifi_mac',
      disableMonitor: 1,
      micropy: {
        import: 'import machine, ubinascii'
      },
      pycode: 'ubinascii.hexlify(machine.unique_id()).decode().upper()',
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wifidisconected',
      blockType: 'command',
      text: '$$futureboard_wifi_disconected',
      pycode: 'wifi.sta.disconnect()',
    },
    '---',
    
    //-----------------------------------------------------------------
    {
      opcode: 'wifimqttconnect',
      blockType: 'command',
      text: '$$futureboard_wifi_mqtt_connect',
      micropy: {
        import: 'from mqttsimple import MQTTClient',
      },
      pycode: "mqtt = MQTTClient([HOST], [ID],port=1883)\r\nmqtt.connect()",
      arguments: {
        HOST: {
          type: 'string',
          defaultValue: 'iot.kittenbot.cn',
        },
        ID: {
          type: 'string',
          defaultValue: 'id',
        },
      },
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wifimqttconnectwithopt',
      blockType: 'command',
      text: '$$futureboard_wifi_mqtt_connect_withopt',
      micropy: {
        import: 'from mqttsimple import MQTTClient',
      },
      pycode: [
        "mqtt = MQTTClient([HOST], [ID],user=str([NAME]), password=str([PWD]))",
        "mqtt.connect()"
        ],
      arguments: {
        HOST: {
          type: 'string',
          defaultValue: 'iot.kittenbot.cn',
        },
        ID: {
          type: 'string',
          defaultValue: 'id',
        },
        NAME: {
          type: 'string',
          defaultValue: '',
        },
        PWD: {
          type: 'string',
          defaultValue: '',
        },
      },
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wifimqttsubscribe',
      blockType: 'command',
      text: '$$futureboard_wifi_mqtt_subscribe',
      pycode: "mqtt.subscribe([TOPIC])",
      arguments: {
        TOPIC: {
          type: 'string',
          defaultValue: '/topic',
        },
      },
    },
    //-----------------------------------------------------------------
    {
      opcode: 'wifimqttread',
      blockType: 'reporter',
      text: '$$futureboard_wifi_mqtt_read',
      pycode: "mqtt.read([TOPIC])",
      arguments: {
        TOPIC: {
          type: 'string',
          defaultValue: '/topic',
        },
      },
    },
    {
      opcode: 'wifimqttpublish',
      blockType: 'command',
      text: '$$futureboard_wifi_mqtt_publish',
      pycode: "mqtt.publish([TOPIC], [MSG])",
      arguments: {
        TOPIC: {
          type: 'string',
          defaultValue: '/topic',
        },
        MSG: {
          type: 'string',
          defaultValue: 'message',
        },
      },
    },
    '---'

    //-----------------------------------------------------------------
    // {
    //   opcode: 'wifimqttcheck',
    //   blockType: 'command',
    //   text: '$$futureboard_wifi_mqtt_check',
    //   pycode: 'mqtt.check_msg()',
    // },
  ],
}